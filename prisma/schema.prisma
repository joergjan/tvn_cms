generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("PRIVATE_PRISMA_ACCELERATE_KEY")
  directUrl = env("POSTGRES_PRISMA_URL")
}

model Riege {
  id              Int             @id @default(autoincrement())
  name            String
  description     String
  age             String
  image           Image[]
  person          PersonRiege[]
  trainingszeiten Trainingszeit[]
  galery  Galery @relation(fields: [galeryId], references: [id])
  galeryId        Int
}

model Role {
  id   Int          @id @default(autoincrement())
  name String
  person Person?    @relation(fields: [personId], references: [id])
  personId Int?     @unique
}

model Person {
  id         Int           @id @default(autoincrement())
  firstName  String
  name       String
  isVorstand Boolean?
  email      String
  role       Role?
  image      Image?
  riegen     PersonRiege[]
}

model Trainingszeit {
  id        Int      @id @default(autoincrement())
  riegeId   Int
  weekdayId Int
  from      DateTime @db.Time()
  to        DateTime @db.Time()
  riege     Riege    @relation(fields: [riegeId], references: [id], onDelete: Cascade)
  weekday   Weekday  @relation(fields: [weekdayId], references: [id], onDelete: Cascade)
}

model Weekday {
  id              Int             @id @default(autoincrement())
  name            String
  trainingszeiten Trainingszeit[]
}

model Galery {
  id    Int     @id @default(autoincrement())
  name  String
  image Image[]
  riege Riege[]
}

model PersonRiege {
  personId Int
  riegeId  Int
  person   Person @relation(fields: [personId], references: [id], onDelete: Cascade)
  riege    Riege  @relation(fields: [riegeId], references: [id], onDelete: Cascade)

  @@id([personId, riegeId])
}

model Image {
  id            Int          @id @default(autoincrement())
  url           String
  date          DateTime     @default(now())
  galery        Galery?      @relation(fields: [galeryId], references: [id], onDelete: Cascade)
  galeryId      Int?         
  riege         Riege?       @relation(fields: [riegeId], references: [id])
  riegeId       Int?         
  post          Post?        @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId        Int?         
  person        Person?      @relation(fields: [personId], references: [id], onDelete: Cascade) 
  personId      Int?         @unique
}

model Post {
  id      Int      @id @default(autoincrement())
  title   String
  text    String
  date    DateTime @default(now())
  image   Image[]
}

model User {
  id           String    @id @unique
  name         String
  username     String    @unique
  isAdmin      Boolean   @default(false)
  isEditor     Boolean   @default(false)
  key          Key[]
  auth_session Session[]
}

model Session {
  id             String @id @unique
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  user           User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
}

model Key {
  id              String  @id @unique
  hashed_password String?
  user_id         String
  user            User    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
}
